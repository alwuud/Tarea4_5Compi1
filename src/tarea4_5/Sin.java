
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jul 04 20:10:49 CST 2017
//----------------------------------------------------

package tarea4_5;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jul 04 20:10:49 CST 2017
  */
public class Sin extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sin() {super();}

  /** Constructor which sets the default scanner. */
  public Sin(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sin(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\005\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\004\005\005\001\002\000\006\002\000\004" +
    "\015\001\002\000\004\007\011\001\002\000\004\002\010" +
    "\001\002\000\006\002\ufffe\004\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\004\012\001\002\000\004\007\013" +
    "\001\002\000\004\006\014\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\004\005\005\001\002\000\006\002\uffff" +
    "\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\010\002\005\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\015" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sin$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sin$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sin$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.out.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sin$actions {
  private final Sin parser;

  /** Constructor */
  CUP$Sin$actions(Sin parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sin$do_action(
    int                        CUP$Sin$act_num,
    java_cup.runtime.lr_parser CUP$Sin$parser,
    java.util.Stack            CUP$Sin$stack,
    int                        CUP$Sin$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sin$result;

      /* select the action based on the action number */
      switch (CUP$Sin$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= parIzq num coma num parDer 
            {
              Punto RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sin$stack.elementAt(CUP$Sin$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sin$stack.elementAt(CUP$Sin$top-1)).value;
		
	   		RESULT= new Punto(Double.parseDouble(n1), Double.parseDouble(n2));

	   
              CUP$Sin$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-4)), ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), RESULT);
            }
          return CUP$Sin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= E 
            {
              Punto RESULT =null;
		int primeroleft = ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()).left;
		int primeroright = ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()).right;
		Punto primero = (Punto)((java_cup.runtime.Symbol) CUP$Sin$stack.peek()).value;
		
	 	RESULT = primero;
	 
              CUP$Sin$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), RESULT);
            }
          return CUP$Sin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= L coma E 
            {
              Punto RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-2)).right;
		Punto origen = (Punto)((java_cup.runtime.Symbol) CUP$Sin$stack.elementAt(CUP$Sin$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()).right;
		Punto next = (Punto)((java_cup.runtime.Symbol) CUP$Sin$stack.peek()).value;
		
	 	RESULT = origen;
	 	if(RESULT.checkNext(next)){
	 		RESULT.setCercano(next);
	 	}		
	 
              CUP$Sin$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-2)), ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), RESULT);
            }
          return CUP$Sin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= L 
            {
              Object RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()).right;
		Punto origen = (Punto)((java_cup.runtime.Symbol) CUP$Sin$stack.peek()).value;
		
		System.out.println( "(" + origen.cercano.getX() + "," + origen.cercano.getY() + ")" );
		System.out.println("Distancia " + origen.getDistancia());
	
              CUP$Sin$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), RESULT);
            }
          return CUP$Sin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sin$stack.elementAt(CUP$Sin$top-1)).value;
		RESULT = start_val;
              CUP$Sin$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sin$stack.elementAt(CUP$Sin$top-1)), ((java_cup.runtime.Symbol)CUP$Sin$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sin$parser.done_parsing();
          return CUP$Sin$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

